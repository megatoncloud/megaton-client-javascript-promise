/**
 * Megaton API
 * JSON API for the Megaton Cloud Platform
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@megaton.cloud
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UseCase', 'model/UseCaseSpec'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UseCase'), require('../model/UseCaseSpec'));
  } else {
    // Browser globals (root is window)
    if (!root.MegatonApi) {
      root.MegatonApi = {};
    }
    root.MegatonApi.UseCasesApi = factory(root.MegatonApi.ApiClient, root.MegatonApi.UseCase, root.MegatonApi.UseCaseSpec);
  }
}(this, function(ApiClient, UseCase, UseCaseSpec) {
  'use strict';

  /**
   * UseCases service.
   * @module api/UseCasesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UseCasesApi. 
   * @alias module:api/UseCasesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create use-case
     * Executes a new use-case for a specified tenant
     * @param {module:model/UseCaseSpec} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UseCase} and HTTP response
     */
    this.createUseCaseWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUseCase");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UseCase;

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create use-case
     * Executes a new use-case for a specified tenant
     * @param {module:model/UseCaseSpec} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UseCase}
     */
    this.createUseCase = function(body) {
      return this.createUseCaseWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete use-case
     * Deletes a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteUseCaseWithHttpInfo = function(useCaseId) {
      var postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling deleteUseCase");
      }


      var pathParams = {
        'useCaseId': useCaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete use-case
     * Deletes a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteUseCase = function(useCaseId) {
      return this.deleteUseCaseWithHttpInfo(useCaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get use-case
     * Retrieve a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UseCase} and HTTP response
     */
    this.getUseCaseWithHttpInfo = function(useCaseId) {
      var postBody = null;

      // verify the required parameter 'useCaseId' is set
      if (useCaseId === undefined || useCaseId === null) {
        throw new Error("Missing the required parameter 'useCaseId' when calling getUseCase");
      }


      var pathParams = {
        'useCaseId': useCaseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UseCase;

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases/{useCaseId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get use-case
     * Retrieve a specified use-case
     * @param {Number} useCaseId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UseCase}
     */
    this.getUseCase = function(useCaseId) {
      return this.getUseCaseWithHttpInfo(useCaseId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get use-cases
     * Retrieve all use-cases for a specified tenant
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UseCase>} and HTTP response
     */
    this.getUseCasesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['password'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UseCase];

      return this.apiClient.callApi(
        '/v1/tenants/me/use-cases', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get use-cases
     * Retrieve all use-cases for a specified tenant
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UseCase>}
     */
    this.getUseCases = function() {
      return this.getUseCasesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
